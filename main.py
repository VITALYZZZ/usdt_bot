import os
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
BSCSCAN_API_KEY = os.getenv("BSCSCAN_API_KEY")
ADMIN_ID = 813287836
CHANNEL_ID = -1002185480944

TRC20_ADDRESS = "TSViFWncAuWxL1ADua7VwCk96gxAbL8TzS"
BEP20_ADDRESS = "0x4a3E77d046A89121D0911E132C938b2077ad3E00"
USDT_AMOUNT = 279


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]]
    text = (
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî *{USDT_AMOUNT} USDT* (–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ)\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ç–æ—á–Ω–æ* {USDT_AMOUNT} USDT –Ω–∞ *–ª—é–±–æ–π* –∏–∑ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∏–∂–µ:\n\n"
        f"`TRC20:` `{TRC20_ADDRESS}`\n"
        f"`BEP20:` `{BEP20_ADDRESS}`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")


async def paid_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–µ—à (TX ID) –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")


async def handle_tx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tx_id = update.message.text.strip()

    if not tx_id:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
        return

    msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TRC20
    if len(tx_id) == 64:
        result = await check_trc20(tx_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ BEP20
    elif tx_id.startswith("0x") and len(tx_id) == 66:
        result = await check_bep20(tx_id)
    else:
        await msg.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TX ID. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à.")
        return

    if result["status"]:
        await msg.edit_text("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–∞—Å —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤—è—Ç –≤ –∫–∞–Ω–∞–ª.")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\nTX: `{tx_id}`\nUser: @{update.effective_user.username}",
            parse_mode="Markdown"
        )
    else:
        await msg.edit_text(f"‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞.\n\n–î–µ—Ç–∞–ª–∏: {result['message']}")


async def check_trc20(tx_id):
    url = f"https://apilist.tronscanapi.com/api/transaction-info?hash={tx_id}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                if not data.get("contractRet") == "SUCCESS":
                    return {"status": False, "message": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É—Å–ø–µ—à–Ω–∞"}

                token_info = data.get("tokenTransferInfo", {})
                if (
                    token_info.get("to_address", "").lower() == TRC20_ADDRESS.lower() and
                    float(token_info.get("amount_str", "0")) / (10 ** 6) >= USDT_AMOUNT
                ):
                    return {"status": True}
                return {"status": False, "message": "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"}
    except Exception as e:
        return {"status": False, "message": str(e)}


async def check_bep20(tx_id):
    url = (
        f"https://api.bscscan.com/api"
        f"?module=account&action=tokentx&txhash={tx_id}&apikey={BSCSCAN_API_KEY}"
    )
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                txs = data.get("result", [])
                if not txs:
                    return {"status": False, "message": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

                for tx in txs:
                    if (
                        tx["to"].lower() == BEP20_ADDRESS.lower() and
                        tx["value"] and
                        int(tx["value"]) / (10 ** int(tx["tokenDecimal"])) >= USDT_AMOUNT and
                        tx["tokenSymbol"] == "USDT"

):
                        return {"status": True}

                return {"status": False, "message": "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"}
    except Exception as e:
        return {"status": False, "message": str(e)}


if name == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(paid_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_tx))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
